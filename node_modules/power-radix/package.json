{
  "name": "power-radix",
  "version": "2.2.0",
  "description": "Library for converting numbers from one radix representation (encoding) to another, with optional custom defined encodings. Inspired by rubyworks/radix.",
  "main": "lib/index.js",
  "scripts": {
    "lint": "jshint",
    "test": "npm run lint; DEBUG=power-radix* NODE_PATH=./ ./node_modules/.bin/lab -c"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cflynn07/power-radix.git"
  },
  "keywords": [
    "radix",
    "base",
    "convert",
    "power",
    "math",
    "hex",
    "base64",
    "base58",
    "base10"
  ],
  "author": {
    "name": "Casey Flynn",
    "email": "cflynn.us@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/cflynn07/power-radix/issues"
  },
  "homepage": "https://github.com/cflynn07/power-radix",
  "dependencies": {
    "bigi": "^1.4.0",
    "debug": "^2.1.1"
  },
  "devDependencies": {
    "code": "^1.3.0",
    "jshint": "^2.6.3",
    "lab": "^5.5.0"
  },
  "readme": "power-radix\n===========\n[![Build Status](https://travis-ci.org/cflynn07/power-radix.svg)](https://travis-ci.org/cflynn07/power-radix)\n[![Dependency Status](https://david-dm.org/cflynn07/power-radix.svg)](https://david-dm.org/cflynn07/power-radix)\n[![devDependency Status](https://david-dm.org/cflynn07/power-radix/dev-status.svg)](https://david-dm.org/cflynn07/power-radix#info=devDependencies)\n\n[![NPM](https://nodei.co/npm/power-radix.png?compact=true)](https://nodei.co/npm/power-radix/)  \n\nLibrary for converting numbers from one radix representation (encoding) to another, with optional custom defined encodings. Inspired by rubyworks/radix.\n\nFeatures\n--------\n\n - Convert to and from any base.\n - Define custom encoding and character sets.\n\nUsage\n-----\n\nBase conversions with ASCII ordered notations are easy in Javascript.\n```js\n(255).toString(16) === 'ff'\nparseInt('ff', 16) === 255\n```\n\nBut JavaScript limits you to radix values 2 - 36.\n```js\n(255).toString(37) // error\n```\n\npower-radix provides the means of converting to and from any base.  \nFor example, a number in base 256 can be representated by the array [100, 10] (Math.pow(100, 256) + Math.pow(10, 1)) and can be converted to base 10.\n```js\n// as an array\nnew PowerRadix([100, 10], 256).toArray(10); // ['2', '5', '6', '1', '0']\n\n// or as a string\nnew PowerRadix([100, 10], 256).toString(10); // \"25610\"\n```\n\npower-radix also supports custom character encodings. By default, power-radix uses the following character encoding:  \n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`\n\nYou can optionally specify an array of characters to use as symbols for a radix to give your output a custom encoding.\n```js\nvar base = ['Q', 'W', 'E', 'R', 'T', 'Y', 'I', 'O', 'U'];\nnew PowerRadix([1, 0], 10).toArray(base); // ['W', 'Q']\nnew PowerRadix('10', 10).toArray(base);   // ['W', 'Q']\nnew PowerRadix(10, 10).toArray(base);     // ['W', 'Q']\n\nnew PowerRadix([1, 0], 10).toString(base); // \"WQ\"\nnew PowerRadix('10', 10).toString(base);   // \"WQ\"\nnew PowerRadix(10, 10).toString(base);     // \"WQ\"\n```\n\nInstalling\n----------\n```\n$ npm install power-radix\n```\n\nTesting\n-------\n```\n// Tests + coverage reports are run using Lab\n$ npm test\n```\n\nLicense\n-------\n[MIT](https://raw.githubusercontent.com/cflynn07/power-radix/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "power-radix@2.2.0",
  "_shasum": "6835e59d5ba1e9e1cbe982be921b653ba191f124",
  "_from": "power-radix@*"
}
